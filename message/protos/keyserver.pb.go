// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0-devel
// 	protoc        v3.12.0
// source: keyserver.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorMessage int32

const (
	ErrorMessage_OK                  ErrorMessage = 0
	ErrorMessage_SERVER_ERROR        ErrorMessage = 1
	ErrorMessage_USER_ALREADY_EXISTS ErrorMessage = 2
)

// Enum value maps for ErrorMessage.
var (
	ErrorMessage_name = map[int32]string{
		0: "OK",
		1: "SERVER_ERROR",
		2: "USER_ALREADY_EXISTS",
	}
	ErrorMessage_value = map[string]int32{
		"OK":                  0,
		"SERVER_ERROR":        1,
		"USER_ALREADY_EXISTS": 2,
	}
)

func (x ErrorMessage) Enum() *ErrorMessage {
	p := new(ErrorMessage)
	*p = x
	return p
}

func (x ErrorMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_keyserver_proto_enumTypes[0].Descriptor()
}

func (ErrorMessage) Type() protoreflect.EnumType {
	return &file_keyserver_proto_enumTypes[0]
}

func (x ErrorMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorMessage.Descriptor instead.
func (ErrorMessage) EnumDescriptor() ([]byte, []int) {
	return file_keyserver_proto_rawDescGZIP(), []int{0}
}

type GetCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetCertRequest) Reset() {
	*x = GetCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertRequest) ProtoMessage() {}

func (x *GetCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertRequest.ProtoReflect.Descriptor instead.
func (*GetCertRequest) Descriptor() ([]byte, []int) {
	return file_keyserver_proto_rawDescGZIP(), []int{0}
}

func (x *GetCertRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GetCertResponse) Reset() {
	*x = GetCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertResponse) ProtoMessage() {}

func (x *GetCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertResponse.ProtoReflect.Descriptor instead.
func (*GetCertResponse) Descriptor() ([]byte, []int) {
	return file_keyserver_proto_rawDescGZIP(), []int{1}
}

func (x *GetCertResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetCertResponse) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SetCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SetCertRequest) Reset() {
	*x = SetCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCertRequest) ProtoMessage() {}

func (x *SetCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_keyserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCertRequest.ProtoReflect.Descriptor instead.
func (*SetCertRequest) Descriptor() ([]byte, []int) {
	return file_keyserver_proto_rawDescGZIP(), []int{2}
}

func (x *SetCertRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SetCertRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type SetCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMessage ErrorMessage `protobuf:"varint,1,opt,name=errorMessage,proto3,enum=ErrorMessage" json:"errorMessage,omitempty"`
}

func (x *SetCertResponse) Reset() {
	*x = SetCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_keyserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCertResponse) ProtoMessage() {}

func (x *SetCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_keyserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCertResponse.ProtoReflect.Descriptor instead.
func (*SetCertResponse) Descriptor() ([]byte, []int) {
	return file_keyserver_proto_rawDescGZIP(), []int{3}
}

func (x *SetCertResponse) GetErrorMessage() ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return ErrorMessage_OK
}

var File_keyserver_proto protoreflect.FileDescriptor

var file_keyserver_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a, 0x0e,
	0x53, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x41, 0x0a, 0x0c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x32, 0x6a, 0x0a,
	0x08, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x67, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x0f, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c, 0x0a, 0x0e, 0x65, 0x73, 0x66,
	0x73, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x0e, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x08, 0x2e,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_keyserver_proto_rawDescOnce sync.Once
	file_keyserver_proto_rawDescData = file_keyserver_proto_rawDesc
)

func file_keyserver_proto_rawDescGZIP() []byte {
	file_keyserver_proto_rawDescOnce.Do(func() {
		file_keyserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_keyserver_proto_rawDescData)
	})
	return file_keyserver_proto_rawDescData
}

var file_keyserver_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_keyserver_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_keyserver_proto_goTypes = []interface{}{
	(ErrorMessage)(0),       // 0: ErrorMessage
	(*GetCertRequest)(nil),  // 1: GetCertRequest
	(*GetCertResponse)(nil), // 2: GetCertResponse
	(*SetCertRequest)(nil),  // 3: SetCertRequest
	(*SetCertResponse)(nil), // 4: SetCertResponse
}
var file_keyserver_proto_depIdxs = []int32{
	0, // 0: SetCertResponse.errorMessage:type_name -> ErrorMessage
	1, // 1: KeyStore.getCert:input_type -> GetCertRequest
	3, // 2: KeyStore.setCert:input_type -> SetCertRequest
	2, // 3: KeyStore.getCert:output_type -> GetCertResponse
	4, // 4: KeyStore.setCert:output_type -> SetCertResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_keyserver_proto_init() }
func file_keyserver_proto_init() {
	if File_keyserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_keyserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_keyserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_keyserver_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_keyserver_proto_goTypes,
		DependencyIndexes: file_keyserver_proto_depIdxs,
		EnumInfos:         file_keyserver_proto_enumTypes,
		MessageInfos:      file_keyserver_proto_msgTypes,
	}.Build()
	File_keyserver_proto = out.File
	file_keyserver_proto_rawDesc = nil
	file_keyserver_proto_goTypes = nil
	file_keyserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeyStoreClient is the client API for KeyStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyStoreClient interface {
	GetCert(ctx context.Context, in *GetCertRequest, opts ...grpc.CallOption) (*GetCertResponse, error)
	SetCert(ctx context.Context, in *SetCertRequest, opts ...grpc.CallOption) (*SetCertResponse, error)
}

type keyStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyStoreClient(cc grpc.ClientConnInterface) KeyStoreClient {
	return &keyStoreClient{cc}
}

func (c *keyStoreClient) GetCert(ctx context.Context, in *GetCertRequest, opts ...grpc.CallOption) (*GetCertResponse, error) {
	out := new(GetCertResponse)
	err := c.cc.Invoke(ctx, "/KeyStore/getCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyStoreClient) SetCert(ctx context.Context, in *SetCertRequest, opts ...grpc.CallOption) (*SetCertResponse, error) {
	out := new(SetCertResponse)
	err := c.cc.Invoke(ctx, "/KeyStore/setCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyStoreServer is the server API for KeyStore service.
type KeyStoreServer interface {
	GetCert(context.Context, *GetCertRequest) (*GetCertResponse, error)
	SetCert(context.Context, *SetCertRequest) (*SetCertResponse, error)
}

// UnimplementedKeyStoreServer can be embedded to have forward compatible implementations.
type UnimplementedKeyStoreServer struct {
}

func (*UnimplementedKeyStoreServer) GetCert(context.Context, *GetCertRequest) (*GetCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCert not implemented")
}
func (*UnimplementedKeyStoreServer) SetCert(context.Context, *SetCertRequest) (*SetCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCert not implemented")
}

func RegisterKeyStoreServer(s *grpc.Server, srv KeyStoreServer) {
	s.RegisterService(&_KeyStore_serviceDesc, srv)
}

func _KeyStore_GetCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServer).GetCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyStore/GetCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServer).GetCert(ctx, req.(*GetCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyStore_SetCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyStoreServer).SetCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KeyStore/SetCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyStoreServer).SetCert(ctx, req.(*SetCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KeyStore",
	HandlerType: (*KeyStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCert",
			Handler:    _KeyStore_GetCert_Handler,
		},
		{
			MethodName: "setCert",
			Handler:    _KeyStore_SetCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyserver.proto",
}
